@startuml GreekGodsAPI_ClassDiagram
!theme plain
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam packageStyle rectangle

' Package declarations
package "info.jab.latency.controller" {
    class GreekGodsController {
        - greekGodsService : GreekGodsService
        --
        + GreekGodsController(greekGodsService: GreekGodsService)
        + getGreekGods() : ResponseEntity<List<String>>
    }

    class GlobalExceptionHandler {
        - logger : Logger
        --
        + handleRuntimeException(ex: RuntimeException, request: WebRequest) : ResponseEntity<ProblemDetail>
        + handleGenericException(ex: Exception, request: WebRequest) : ResponseEntity<ProblemDetail>
    }
}

package "info.jab.latency.service" {
    class GreekGodsService {
        - logger : Logger
        - EXPECTED_GOD_COUNT : int = 20
        - greekGodsRepository : GreekGodsRepository
        --
        + GreekGodsService(greekGodsRepository: GreekGodsRepository)
        + getAllGreekGodNames() : List<String>
        + isDatasetComplete() : boolean
        + getGreekGodsCount() : int
        - validateDataIntegrity(greekGods: List<String>) : void
    }

    class BackgroundSyncService {
        - logger : Logger
        - restClient : RestClient
        - apiEndpoint : String
        - timeoutMs : int
        - syncEnabled : boolean
        - transactionalSyncService : GreekGodsSyncTransactionalService
        --
        + BackgroundSyncService(baseUrl: String, endpoint: String, timeoutMs: int, syncEnabled: boolean, transactionalSyncService: GreekGodsSyncTransactionalService)
        + synchronizeData() : void
        - fetchDataFromExternalAPI() : List<Map<String,Object>>
        - generateSyncId() : String
    }

    class GreekGodsSyncTransactionalService {
        - logger : Logger
        - greekGodsRepository : GreekGodsRepository
        --
        + GreekGodsSyncTransactionalService(greekGodsRepository: GreekGodsRepository)
        + performTransactionalSync(externalData: List<Map<String,Object>>, syncId: String) : SyncResult
        - transformToGreekGods(externalData: List<Map<String,Object>>, syncId: String) : List<GreekGod>
        - mapToGreekGod(externalRecord: Map<String,Object>) : GreekGod
        - extractName(record: Map<String,Object>) : String
        - saveGreekGodsToDatabase(greekGods: List<GreekGod>, syncId: String) : SyncResult
    }

    class SyncResult {
        + inserted : int = 0
        + duplicatesSkipped : int = 0
        + errors : int = 0
    }
}

package "info.jab.latency.repository" {
    interface GreekGodsRepository {
        + findAllGodNames() : List<String>
        + findByName(name: String) : GreekGod
        + existsByName(name: String) : boolean
        + findAllOrderByName() : List<GreekGod>
    }
}

package "info.jab.latency.entity" {
    class GreekGod {
        - id : Long
        - name : String
        --
        + GreekGod()
        + GreekGod(name: String)
        + GreekGod(id: Long, name: String)
        + getId() : Long
        + setId(id: Long) : void
        + getName() : String
        + setName(name: String) : void
        + toString() : String
        + equals(o: Object) : boolean
        + hashCode() : int
    }
}

package "info.jab.latency.config" {
    class SchedulingConfig {
    }
}

package "info.jab.latency" {
    class MainApplication {
        + main(args: String[]) : void
    }
}

' Spring Framework External Dependencies
interface CrudRepository<T,ID> <<Spring Data>> {
}

' Relationships - Composition and Dependencies
GreekGodsController ||--o{ GreekGodsService : uses
GreekGodsService ||--o{ GreekGodsRepository : uses
GreekGodsRepository --|> CrudRepository : extends
GreekGodsRepository ..> GreekGod : manages
BackgroundSyncService ||--o{ GreekGodsSyncTransactionalService : delegates to
GreekGodsSyncTransactionalService ||--o{ GreekGodsRepository : uses
GreekGodsSyncTransactionalService ..> GreekGod : creates
GreekGodsSyncTransactionalService +-- SyncResult : contains

' Exception handling relationship
GlobalExceptionHandler ..> GreekGodsController : handles exceptions from

' Annotation stereotypes
note right of GreekGodsController : @RestController\n@RequestMapping("/api/v1/gods")
note right of GreekGodsService : @Service
note right of BackgroundSyncService : @Service\n@Scheduled methods
note right of GreekGodsSyncTransactionalService : @Service\n@Transactional
note right of GreekGodsRepository : @Repository\nextends CrudRepository
note right of GreekGod : @Table("greek_god")\n@Id, @Column annotations
note right of GlobalExceptionHandler : @ControllerAdvice\n@ExceptionHandler
note right of SchedulingConfig : @Configuration\n@EnableScheduling

@enduml
