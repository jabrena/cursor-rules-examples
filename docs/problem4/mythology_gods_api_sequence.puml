@startuml Multi-Mythology Gods API Sequence
!theme plain
title Multi-Mythology Gods Data Aggregation API Flow

' Actors and Participants
participant "Client Application" as Client
participant "REST API Controller\n(/api/v1/gods)" as Controller
participant "Data Aggregation Service" as Aggregator
participant "External API Client" as APIClient
participant "Greek Gods API\n(my-json-server)" as GreekAPI
participant "Roman Gods API\n(my-json-server)" as RomanAPI
participant "Nordic Gods API\n(my-json-server)" as NordicAPI
participant "Indian Gods API\n(my-json-server)" as IndianAPI
participant "Celtiberian Gods API\n(my-json-server)" as CeltibrianAPI

' System Boundaries
box "Internal System" #LightBlue
  participant Controller
  participant Aggregator
  participant APIClient
end box

box "External Services" #LightYellow
  participant GreekAPI
  participant RomanAPI
  participant NordicAPI
  participant IndianAPI
  participant CeltibrianAPI
end box

' Main Sequence Flow
Client -> Controller : GET /api/v1/gods
activate Controller
note right of Controller : Handle incoming request\nfor aggregated mythology data

Controller -> Aggregator : aggregateAllMythologyGods()
activate Aggregator
note right of Aggregator : Coordinate data retrieval\nfrom all mythology sources

' Parallel API calls to external services
par Greek Mythology
  Aggregator -> APIClient : getGreekGods()
  activate APIClient
  APIClient -> GreekAPI : GET /greek
  activate GreekAPI
  GreekAPI --> APIClient : ["Zeus", "Hera", "Poseidon", ...]
  deactivate GreekAPI
  APIClient --> Aggregator : Greek gods list
  deactivate APIClient
else Roman Mythology
  Aggregator -> APIClient : getRomanGods()
  activate APIClient
  APIClient -> RomanAPI : GET /roman
  activate RomanAPI
  RomanAPI --> APIClient : ["Venus", "Mars", "Neptun", ...]
  deactivate RomanAPI
  APIClient --> Aggregator : Roman gods list
  deactivate APIClient
else Nordic Mythology
  Aggregator -> APIClient : getNordicGods()
  activate APIClient
  APIClient -> NordicAPI : GET /nordic
  activate NordicAPI
  NordicAPI --> APIClient : ["Baldur", "Freyja", "Heimdall", ...]
  deactivate NordicAPI
  APIClient --> Aggregator : Nordic gods list
  deactivate APIClient
else Indian Mythology
  Aggregator -> APIClient : getIndianGods()
  activate APIClient
  APIClient -> IndianAPI : GET /indian
  activate IndianAPI
  IndianAPI --> APIClient : ["Brahma", "Vishnu", "Shiva", ...]
  deactivate IndianAPI
  APIClient --> Aggregator : Indian gods list
  deactivate APIClient
else Celtiberian Mythology
  Aggregator -> APIClient : getCeltibrianGods()
  activate APIClient
  APIClient -> CeltibrianAPI : GET /celtiberian
  activate CeltibrianAPI
  CeltibrianAPI --> APIClient : ["Ataecina", "Candamius", ...]
  deactivate CeltibrianAPI
  APIClient --> Aggregator : Celtiberian gods list
  deactivate APIClient
end

note over Aggregator : Transform and merge data\ninto unified format with\nid, mythology, god fields

Aggregator --> Controller : List<MythologyGod>
deactivate Aggregator

Controller --> Client : HTTP 200 OK\nJSON: [{"id":1,"mythology":"greek","god":"Zeus"}...]
deactivate Controller

note right of Client : Response time < 5 seconds\nAll mythology data aggregated\nin single response

' Error Handling Scenarios
alt External API Timeout
  APIClient -> GreekAPI : GET /greek (timeout)
  activate GreekAPI
  GreekAPI --> APIClient : 504 Gateway Timeout
  deactivate GreekAPI
  APIClient --> Aggregator : Timeout exception
  Aggregator --> Controller : Partial data or error
  Controller --> Client : HTTP 504 Gateway Timeout
  note right of Controller : Handle timeout gracefully\nReturn appropriate error response
else External API Unavailable
  APIClient -> RomanAPI : GET /roman
  activate RomanAPI
  RomanAPI --> APIClient : 500 Internal Server Error
  deactivate RomanAPI
  APIClient --> Aggregator : Service unavailable exception
  Aggregator --> Controller : Error response
  Controller --> Client : HTTP 502 Bad Gateway
  note right of Controller : External service unavailable\nReturn appropriate error code
end

@enduml
